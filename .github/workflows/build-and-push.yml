name: CI & CD

# Reference:
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on: [push, pull_request]

env:
  docker_image_name: rbonghi/jetson_stats

# Reference
# https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions

jobs:
  auto_style:
    name: Auto style code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install autopep8
        run: |
          python -m pip install --upgrade pip
          pip install flake8 autopep8
      - name: Auto style code with autopep8
        run: autopep8 --in-place --aggressive --aggressive --recursive . --max-line-length 180
      - name: Check for changes
        run: |
          if [[ `git status --porcelain` ]]; then
            echo "There are changes after auto-styling the code."
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Auto style code with autopep8"
            git push
          else
            echo "No changes detected."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Build sphinx
        # Manual build documentation
        # Follow https://github.com/ammaraskar/sphinx-action/issues/43#issuecomment-1218439431
        run: |
          # Upgrade pip
          # https://github.com/actions/setup-python/issues/225
          # sudo -H env "PATH=$PATH" python -m pip install --upgrade pip --break-system-packages
          sudo -H env "PATH=$PATH" python -m pip install --break-system-packages -U pip setuptools
          # Install jtop
          sudo -H env "PATH=$PATH" pip install -v -e .
          # Install sphinx requirements
          sudo -H env "PATH=$PATH" pip install -r docs/requirements.txt
          # Run sphinx
          cd docs
          sphinx-build -b html -W . _build/html
      - name: Export website
        id: export_website
        if: ${{ !startsWith(github.ref, 'refs/heads/master') }}
        uses: actions/upload-artifact@v4
        with:
          name: html
          path: docs/_build/html # The folder the action should deploy.
      - name: Deploy on branch
        if: startsWith(github.ref, 'refs/heads/master') || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '.dev') && !contains(github.ref, 'rc'))
        # Follow: https://github.com/marketplace/actions/deploy-to-github-pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: docs/_build/html # The folder the action should deploy.

  deploy:
    name: Deploy on PIP
    needs: [auto_style]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          # sudo -H python -m pip install --upgrade pip
          sudo -H pip install setuptools wheel build twine

      - name: Build package
        run: sudo -H python -m build

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          sudo -H python -m twine upload dist/*
  
      - name: Determine if this is a prerelease
        id: check_prerelease
        run: |
          TAG=${{ github.ref_name }}
          if [[ "$TAG" =~ -[a-zA-Z]+[0-9]*$ ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

  notify:
    name: "Notify socials"
    needs: [deploy, docs]
    runs-on: ubuntu-latest
    steps:

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "**jetson-stats ${{ github.ref_name }}** has been deployed!\nTo install follow `sudo pip3 install jetson-stats==${{ github.ref_name }}`"
